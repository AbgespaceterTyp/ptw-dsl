/*
 * generated by Xtext 2.13.0
 */
package de.htwg.modellgetriebene.generator

import de.htwg.modellgetriebene.pixelTankWarDsl.ActionComponents
import de.htwg.modellgetriebene.pixelTankWarDsl.ActionType
import de.htwg.modellgetriebene.pixelTankWarDsl.Battlefield
import de.htwg.modellgetriebene.pixelTankWarDsl.Block
import de.htwg.modellgetriebene.pixelTankWarDsl.BlockType
import de.htwg.modellgetriebene.pixelTankWarDsl.Direction
import de.htwg.modellgetriebene.pixelTankWarDsl.Player
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.htwg.modellgetriebene.pixelTankWarDsl.Background
import de.htwg.modellgetriebene.pixelTankWarDsl.Color
import de.htwg.modellgetriebene.pixelTankWarDsl.TankType
import org.eclipse.xtext.resource.XtextResource

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PixelTankWarDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.load(#{XtextResource.OPTION_ENCODING -> "UTF-8"})
		
		fsa.generateFile(generateFileName(resource), generateContent(resource));
	}
	
	def generateContent(Resource resource){
		battlefieldToJson(resource.allContents.filter(Battlefield).head)
	}
	
	private def battlefieldToJson(Battlefield battlefield){
		"{" + 
		"\"attackSoundPath\": \"sounds/explosion.wav\"," +
 		"\"levelBackgroundImagePath\": \"images/" + battlefieldBackgroundToString(battlefield.background) + "\"," +
		"\"actionbarBackgroundImagePath\": \"images/background_actionbar.png\"," +
		"\"attackImagePath\": \"images/hit.png\"," +
		"\"rowCount\": " + battlefield.dimesion.width + "," +
		"\"colCount\": " + battlefield.dimesion.height + "," +
		"\"blockObjects\": " +
			blocksToJson(battlefield.blocks.blocks) +
		",\"playerObjects\": " +
			playerToJson(battlefield.players.players) +
		",\"actions\": " +
			actionToJson(battlefield.action.action) +
		"}"
	}
	
	private def battlefieldBackgroundToString(Background background) {
		switch(background){
			case DESERT: {
				"background_desert.png"
			}
			case FORREST: {
				"background_woodlands.png"
			}
			case MOUNTAINS: {
				"background_woodlands.png"
			}
		}
	}
	
	private def blocksToJson(EList<Block> blocks){
		blocks.map[block | 
			return "{" +
			      	"\"name\": \"B\"," +
			      	"\"imagePath\": \"images/"+ blockTypeToString(block.blockType) +"\"," +
			      	"\"position\": {" +
			        	"\"rowIndex\": "+ block.location.XPosition + "," +
			        	"\"columnIndex\": " + block.location.YPosition +
			      		"}" +
					"}"
		]
	}
	
	private def blockTypeToString(BlockType blockType){
		switch(blockType){
			case CITY: {
				"block_city.png"
			}
			case CITY_DESERT: {
				"block_desert_city.png"
			}
			case DUNE: {
				"block_dune.png"
			}
			case HELICOPTER: {
				"block_helicopter_destroyed.png"
			}
			case LAKE: {
				"block_lake.png"
			}
			case MOUNTAIN: {
				"block_mountain.png"
			}
			case PALM: {
				"block_palm.png"
			}
			case WOOD: {
				"block_wood.png"
			}
		}
	}
	
	private def playerToJson(EList<Player> players){
		players.map[player | 
			return "{" +
			      	"\"name\": \"Spieler " + players.indexOf(player) + "\"," +
			      	"\"imagePath\": \"images/" + playerTankToString(player.color, player.tankType) + "\"," +
			      	"\"position\": {" +
			        	"\"rowIndex\": " + player.location.XPosition + "," +
			        	"\"columnIndex\": "+ player.location.YPosition +
			      		"}," +
			      	"\"viewDirection\": " + playerStartDirectionToString(player.startDirection) + "," +
			      	"\"playerNumber\": " + players.indexOf(player) + "," +
			      	"\"wonImagePath\": \"images/" + playerBackgroundToString(player.color) + "\"," +
			      	"\"maxActionPoints\": " + player.actionPoints + "," +
			      	"\"maxHealthPoints\": " + player.healthPoints + "," +
			      	"\"actions\": " +
					playerActionsToJson(player.playerActions.playerActions) +
			    	"}"
    	]
	}
	
	private def playerTankToString(Color tankColor, TankType tankType){
		switch(tankColor){
			case RED: {
				if(TankType.LIGHT.equals(tankType)){
					"light_tank_red.png"
				} else if(TankType.MEDIUM.equals(tankType)){
					"medium_tank_red.png"
				} else {
					"heavy_tank_red.png"
				}
			}
			case BLUE: {
				if(TankType.LIGHT.equals(tankType)){
					"light_tank_blue.png"
				} else if(TankType.MEDIUM.equals(tankType)){
					"medium_tank_blue.png"
				} else {
					"heavy_tank_blue.png"
				}
			}
			case BROWN: {
				if(TankType.LIGHT.equals(tankType)){
					"light_tank_brown.png"
				} else if(TankType.MEDIUM.equals(tankType)){
					"medium_tank_brown.png"
				} else {
					"heavy_tank_brown.png"
				}
			}
			case PURPLE: {
				if(TankType.LIGHT.equals(tankType)){
					"light_tank_purple.png"
				} else if(TankType.MEDIUM.equals(tankType)){
					"medium_tank_purple.png"
				} else {
					"heavy_tank_purple.png"
				}
			}
		}
	}
	
	private def playerActionsToJson(EList<ActionType> actions){
		actions.map[actionType | 
			return "{" +
					"\"id\": " + actionId(actionType) +
					"}"
		]
	}
	
	private def playerStartDirectionToString(Direction direction){
		switch(direction){
			case NORTH: {
				0
			}
			case EAST: {
				1
			}
			case SOUTH: {
				2
			}
			case WEST: {
				3
			}
		}
	}
	
	private def playerBackgroundToString(Color tankColor){
		switch(tankColor){
			case BLUE: {
				"background_won_blue.png"
			}
			case BROWN: {
				"background_won_brown.png"
			}
			case PURPLE: {
				"background_won_purple.png"
			}
			case RED: {
				"background_won_red.png"

			}
		}
	}
	
	private def actionToJson(EList<ActionComponents> actions){
		actions.map[action | 
		return "{" +
			      	"\"id\": " + actionId(action.actionType) + "," +
			      	"\"description\": \"" + actionDescription(action.actionType) + "\"," +
			      	"\"imagePath\": \"images/" + actionImage(action.actionType) + "\"," +
			      	"\"soundPath\": \"move.wav\"," +
			      	"\"actionPoints\": " + action.costs + "," +
			      	"\"range\": " + action.range + "," +
			      	"\"actionType\": " + actionType(action.actionType) + "," +
			      	"\"damage\": " + action.damage +
		    	"}"
    	]
	}
	
	private def actionDescription(ActionType actionType){
		switch(actionType){
			case MOVE: {
				"Panzer bewegen"
			}
			case SHOOT: {
				"Schiessen"
			}
			case ROCKET: {
				"Rakete abschiessen"
			}
			case WAIT: {
				"Warten"
			}
		}
	}
	
	private def actionId(ActionType actionType){
		switch(actionType){
			case MOVE: {
				1
			}
			case SHOOT: {
				2
			}
			case ROCKET: {
				3
			}
			case WAIT: {
				4
			}
		}
	}
	
	private def actionImage(ActionType actionType){
		switch(actionType){
			case MOVE: {
				"action_move.png"
			}
			case SHOOT: {
				"action_attack.png"
			}
			case ROCKET: {
				"action_rocket_attack.png"
			}
			case WAIT: {
				"action_wait.png"
			}
		}
	}
	
	private def actionType(ActionType actionType){
		switch(actionType){
			case MOVE: {
				1
			}
			case SHOOT: {
				0
			}
			case ROCKET: {
				0
			}
			case WAIT: {
				2
			}
		}	
	}
	
	/**
	 * Generates a file name for pattern 'G_ScenarioName_(PlayerCount-Player).json'
	 */
	private def generateFileName(Resource resource){
		"G_" + resource.allContents.filter(Battlefield).head.battlefield + "_(" + resource.allContents.filter(Player).size + "-Player).json"
	}
}
